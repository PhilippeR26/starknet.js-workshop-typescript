// Pedagogical account abstraction (must not be used to hold valuable assets).
// This account uses a signature made of an array of 4 felts.
// The 2 first felts are a normal r,s starknet transaction signature.
// The 2 last felts are generated by a hardware signer, that uses as input the transaction nonce, and as output its starknet signature.
// So, 
// - If the hardware signer is not connected, it's impossible to process a transaction, even if the private key of the account has been stolen. 
// - If the hardware wallet is stolen, it can't be used with the account (as the account private key is also necessary).
// - So it's necessary to steal both the account private key and the hardware wallet to process any transaction.
//
// constructor: 2 felts : first the account public key, then the hardware signer public key.
//
// The hardware wallet must be used only with ONE single account, to be sure to use a nonce signature only once.
//
// Coded with Cairo 2.12.0

pub mod account_special;
pub use account_special::AccountComponentSpecial;

#[starknet::contract(account)]
mod MyAccountAbstraction {
    use openzeppelin::introspection::src5::SRC5Component;
    use super::AccountComponentSpecial;

    component!(path: AccountComponentSpecial, storage: account, event: AccountEvent);
    component!(path: SRC5Component, storage: src5, event: SRC5Event);

    // External
    #[abi(embed_v0)]
    impl SRC6Impl = AccountComponentSpecial::SRC6Impl<ContractState>;
    #[abi(embed_v0)]
    impl SRC6CamelOnlyImpl = AccountComponentSpecial::SRC6CamelOnlyImpl<ContractState>;
    #[abi(embed_v0)]
    impl DeployableImpl = AccountComponentSpecial::DeployableImplSpecial<ContractState>;
    #[abi(embed_v0)]
    impl SRC5Impl = SRC5Component::SRC5Impl<ContractState>;

    // Internal
    impl AccountInternalImpl = AccountComponentSpecial::InternalImpl<ContractState>;

    #[storage]
    struct Storage {
        #[substorage(v0)]
        account: AccountComponentSpecial::Storage,
        #[substorage(v0)]
        src5: SRC5Component::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        #[flat]
        AccountEvent: AccountComponentSpecial::Event,
        #[flat]
        SRC5Event: SRC5Component::Event,
    }

    #[constructor]
    fn constructor(ref self: ContractState, public_key: felt252, hardware_public_key: felt252) {
        self.account.initializer(public_key, hardware_public_key);
    }
}
